*PROBLEMAS:


*05/06:
    RESOLVIDO: Implementar a função 'slv.js' em POSTAGEM CONTROLLER, para salvar a imagem no banco de dados como binário, depois jogar para uma rota de ID unico
    e então puxar a imagem para o front-end;
*07/06:
    IDEIA: RECEBER ARQUIVOS TIPO AUDIO DE WHATSAPP .OGG
-----------------------------
*ATT:

*05/06:
    -Hoje refiz a aplicação pois não estava recebendo Imagens estáticas no Front Handlebars + express.
 ~~
    -App passou a receber arquivos tipo JPG, PNG, salva localmente em 'src/public/uploads' e manda o SRC para o banco de dados..
    onde é feita a requisição pelo front-end em <img src='SRC DO BD'>;

    -Também retirei o SLUG para ser feito manualmente pelo usuario, agora a aplicação cria o SLUG sozinho;

    -Criei uma função para salvar a imagem no BD como 'BinData', joga para URL onde pode ser feita a requisição, falta implementar no controller
    PS: a função está em slv.js e o 'GET' em index.js principal..
-------------------------
*06/06
    -Criei o ImagemController para salvar as imagens no banco de dados;

    -Refiz o 'addPostagens' e 'updatePost' do PostagensController junto com a função 'Salvar' do ImagemController;

    -Adicionei uma função em 'helpers' no 'multer.js' para limpar os arquivos da pasta 'uploads' depois de 24h para nao sobrecarregar o servidor;
-------------------------
*07/06
    -Alterei o ImagemController para DocsController, agora ele lida com pdf e imagens. Também criei uma rota para renderizar os pdf salvos no BD.

    -Alterei o 'helpers/multer.js', agora ele nao salva somente na pasta 'uploads', verifica se existe as pastas 'images, pdf e others' se nao tiver as cria,
     quando o arquivo é recebido pelo servidor ele verifica atraves de uma função qual o tipo de arquivo e salva na pasta correspondente.

    -Alterações no BD: o model 'posts' agora no campo 'img' nao recebe somente uma string, recebe uma chave estrangeira da 'Collection' 'Imagem';
     A Collection 'Imagem' agora recebe um novo campo, o 'tipo' que por enquanto pode ser 'img' ou 'pdf'.

    -Criei uma nova função no helpers, o 'helpersHandlebars.js' para comparar 2 valores.

    -Essa nova função é usada no 'views/postagem/index.hbs' para ver se o tipo de arquivo é 'img' se for renderiza a tag img, se for tipo 'pdf' ele 
     renderiza o pdf.
    
    -Adionei o método 'dowloadDOCX' ao DocsController para baixar os arquivos WORD diretamente de uma rota.

-----------------------------
*10/06
    -Atualizei o Multer, DocsController e criei uma rota para receber audios, 'mp3, wav e ogg'.
    -Audios agora sao salvos na nova pasta 'audio' em upload e salva no banco de dados com a tipo: 'audio';
    -Atualizei a função para apagar os arquivos locais depois de 24h, agora ela percorre todas as pastas de 'uploads' e exclui seus arquivos;
-----------------------------
-----------------------------
-----------------------------NOVA SEMANA-----------------------------
*12/06
    -Atualizei o Multer, agora recebe varios tipos de arquivos na criação da Postagem.
    -Mudei o 'Schema' dos Posts, agora não recebe um unico campo 'img' (que é o campo dos documentos) se não um array de documentos,
     esse Array contém as informações de 'ID' dos documentos para conseguir puxar pela API.

     obs: atualizar a funçao AttPosts para receber vários arquivos..
-----------------------------
*13/06
    -Atualizei o input de files para um input multiplo para selecionar varios arquivos.
    -Atualizei o DeletePosts para deletar todos os arquivos inseridos, pois antes só deletava o primeiro..
    -Atualizei o método AttPosts, agora ele recebe varios arquivos e sobrescreve os que ja existiam antes, além de apagar os antigos docs do BD;

    obs: att o AttPosts para nao sobrescrever os arquivos
-----------------------------
14/06
    -Atualizei o AttPosts, agora ele nao sobrescreve os arquivos e sim adiciona mais.
    -Houveram mudanças e correções de bugs em: DocsController, PostagensController, helpersHandlebars, multer.js, Rotas adm.js 
     e nos layouts..

     obs: comecei a trabalhar no deletar documentos especificos

-----------------------------
15/06
    -Criei uma nova tabela 'DocsExcluidos' que é para onde vão os arquivos 'excluidos' pelo admn.
    -Mudanças no: updatePost do PostagensController, correção de bugs, 
    -Novo método criado: remanejaDoc no DocsController para mandar os arquivos 'excluidos' da tabela post para a tabela DocsExcluidos.

    obs: consertar bugs: remanejaDoc não esta apagando o ID dos documentos de Postagens. Word não está sendo renderizado no Handlebars mesmo com o tipo=word.

-----------------------------
16/05
    -BUG do remanejaDOC e do Word corrigidos com sucesso
    -Adicionei Excel para upload de arquivos e uma rota para o usuario fazer download.
    -Adicionei Txt para upload e uma rota para o usuario fazer download.
    -Adicionei videos mp3, mp4 etc para upload e uma rota para o usuario fazer download.
    -Adicionei arquivos .zip e .rar para upload e uma rota para o usuario fazer download.
-----------------------------
-----------------------------NOVA SEMANA-----------------------------
*19/06
    -Modificação do 'Models' dos Documentos para add um campo de String chamado 'texto' em que vai ser armazenado o texto dos arquivos
    -Agora quando o usuario salva um PDFs é criado um campo novo no BD, o 'texto', que é o próprio texto do arquivo.
     Essa função foi implementada em uma condicional do método 'Salve' nos DocsController.
    -Criação do método buscaPalavra nos DocsController para buscar a palavra inserida pelo usuario no campo
     'texto' no banco de dados dos arquivos.
    -Criação da Rota para o 'DocsController.buscaPalavra' em 'routes/adm.js'
    
    obs: renomear variaveis e deixar o código mais clean amanhã dos novos métodos criados..
-----------------------------
*20/06
    -Mudanças no método buscaPalavra, agora ele recebe um parametro do front para pesquisar no banco de dados e retorna
     se existir o nome e id do documento.
    -Agora no Front tem uma barra de pesquisa em que tem dois tipos de pesquisa, a simples que pesquisa por enquanto por titulo
     (depois irá pesquisar por autor, descrição etc) e a pesquisa afundo que chama o método busca palavra atraves de um fetch,
     e então renderiza um card com o nome do documento que existe aquelas palavras pesquisadas e o link para ve-lo.
    -Várias modificações no 'script.js' na pasta 'public/js', add funcionalidades etc..
    -Assim como o PDF os arquivos WORD passam a ter o texto extraido e salvo no BD, as pesquisas afundo agora também funcionam neles

    obs: add campo texto para schema dos arquivos excluidos..
-----------------------------
*21/06
    -Mudanças no PostagensController.deletePost, agora ele nao deleta mais os documentos direto do banco de dados quando o post for excluido,
     ele muda todos os documentos para uma nova tabela, a DocsExcluidos..
    -Correção de bugs, renderização de vários tipos de arquivos no frontend.

    obs: arrumar em scripts.js o buscaTitulo() em keyup..
-----------------------------
*22/06
    -Função buscaTitulo ('/public/js/script.js') agora é buscaElementos e busca pelos titulos, descrição e autor, a função verifica se a string é igual a inserida pelo usuario
     se for ela marca em vermelho a palavra e oculta todas as divs que não a contém.. ultiliza a função startsWith() para ver se o titulo/descricao começa
     com a palavra, mas pode ser usado o método includes() para ver se titulo/descricao contém a palavra escrita pelo usuario.. porém se usamos o 'includes()'
     ela nos mostra até as letras, ex: se colocamos 'O' irão aparecer varias coisas na pesquisa pois varias palavras incluem a letra 'O'...
-----------------------------
*23/06
    -Atualização da aba categorias, separa os assuntos pelas categorias e encaminha o usuario para uma pagina apenas com a categoria selecionada;
    -Criação da função 'dateFormat' ('src/helpers/helpersHandlebars') para formatar a data recebida pelo banco de dados que antes era
     "Fri Jun 23 2023 09:22:21 GMT-0300 (Horário Padrão de Brasília)" agora no frontend fica: " 23/Jun/2023 as 09:22:21";
    -Adicionei a função 'buscaElementos' e um input de busca dentro de Categorias e em Postagens;
    -Organizei o código, agora o 'scripts.js' só é responsavel por detectar os eventos de pesquisa e executar as funções correspondetes,
     as funções de pesquisa agora estão salvas em 'helpers.js' (src/public/js/helpers.js) sendo elas: desativaTextarea, innerOutput, removerAcentos, buscaElementos,
     resetFront e buscaPalavra.
    -Alterações na função 'buscaPalavra', agora ela mostra pro usuario no front quando não encontra o documento.. antes só aparecia no backend.
    -Função 'buscaTitulo' agora busca também o 'conteudo' da postagem, e exibe os correspondentes.

    -Arquivos suportados na aplicação:
     pdf, jpg, jpeg, png, jfif, xls, xlsx, csv,doc, docx, mp3, wav, ogg, txt, mp4, avi, mkv, zip, rar
-------------------------------------------
-----------------------------NOVA SEMANA-----------------------------
*26/06
    -Adicionei a função 'iconDoc' em 'src/helpers/helpersHandlebars', essa função detecta qual o tipo de arquivo tem nas postagens e retorna o 'src'
     da imagem para renderizar no frontend e exibir um icone de acordo com os arquivos que existem nessa postagem.
    -Agora os arquivos '.txt' também tem o texto extraido e salvo no banco de dados.. a 'pesquisa profunda' agora detecta se os docs txt contém essa palavra.
    -Agora existem dos tipos de usuarios, os normais e os admin, o 'middleware' dos admins é chamado de 'eAdmin' e fica em (src/helpers/middleware), por enquanto
     apenas Admins podem apagar posts e Registrar novos usuarios..
    -Já conseguimos Registrar os usuarios via formulario do front end, existe a opção 'Esse usuario é um admin?' que se marcada envia os dados para o BD salvando
     o usuario como admin ou usuario normal..
-------------------------------------------
*27/06
    -Adicionei uma rota em 'userRoute' para o 'Admin painel' onde são renderizados todos os usuarios e podem ser alteradas as permissões
     para usuario e administrador;
    -Criações de 3 novos métodos em UsuarioController: RenderizaADM, RenderizaUSUARIO, MudaPermissão;
    -Criação do front 'views/usuarios/': adm.hbs, editUser.hbs;
    
